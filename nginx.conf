events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    client_max_body_size 100M; # For large file uploads
    client_body_timeout 60s;
    client_header_timeout 60s;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=processing:10m rate=5r/s;

    # Backend servers
    upstream backend_servers {
        least_conn; # Use least connections for better load distribution
        server backend-1:5000 max_fails=3 fail_timeout=30s;
        server backend-2:5000 max_fails=3 fail_timeout=30s;
        server backend-3:5000 max_fails=3 fail_timeout=30s;
        
        # Health checks (if using nginx plus)
        # health_check interval=10s fails=3 passes=2;
        
        keepalive 32; # Keep connections alive
    }

    # Frontend servers
    upstream frontend_servers {
        server frontend:3000;
        keepalive 16;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Static file serving with caching
        location /uploads/ {
            alias /var/www/uploads/;
            expires 1h;
            add_header Cache-Control "public, immutable";
            add_header Access-Control-Allow-Origin "*";
            
            # Optimize for static files
            sendfile on;
            tcp_nopush on;
            aio on;
            directio 512;
        }

        # API routes with rate limiting
        location /api/images/compress {
            limit_req zone=processing burst=10 nodelay;
            proxy_pass http://backend_servers;
            include /etc/nginx/proxy_params;
        }

        location /api/images/convert {
            limit_req zone=processing burst=10 nodelay;
            proxy_pass http://backend_servers;
            include /etc/nginx/proxy_params;
        }

        location /api/images/resize {
            limit_req zone=processing burst=10 nodelay;
            proxy_pass http://backend_servers;
            include /etc/nginx/proxy_params;
        }

        location /api/images/crop {
            limit_req zone=processing burst=10 nodelay;
            proxy_pass http://backend_servers;
            include /etc/nginx/proxy_params;
        }

        location /api/upload {
            limit_req zone=upload burst=20 nodelay;
            proxy_pass http://backend_servers;
            include /etc/nginx/proxy_params;
            
            # Upload-specific settings
            client_max_body_size 100M;
            proxy_request_buffering off;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
        }

        # General API routes
        location /api/ {
            limit_req zone=api burst=50 nodelay;
            proxy_pass http://backend_servers;
            include /etc/nginx/proxy_params;
        }

        # Frontend routes
        location / {
            proxy_pass http://frontend_servers;
            include /etc/nginx/proxy_params;
            
            # Handle Next.js routing
            try_files $uri $uri/ @fallback;
        }

        location @fallback {
            proxy_pass http://frontend_servers;
            include /etc/nginx/proxy_params;
        }

        # Health check endpoint
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Include proxy parameters file
    # This should be created separately
} 
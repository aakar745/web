version: '3.8'

services:
  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./uploads:/var/www/uploads:ro
    depends_on:
      - backend-1
      - backend-2
      - backend-3
    restart: unless-stopped

  # Multiple Backend Instances
  backend-1:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=5000
      - REDIS_HOST=redis
      - MONGODB_URI=mongodb://mongo:27017/web-tools-prod
      - WORKER_CONCURRENCY=20
      - INSTANCE_ID=backend-1
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - redis
      - mongo
    restart: unless-stopped

  backend-2:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=5000
      - REDIS_HOST=redis
      - MONGODB_URI=mongodb://mongo:27017/web-tools-prod
      - WORKER_CONCURRENCY=20
      - INSTANCE_ID=backend-2
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - redis
      - mongo
    restart: unless-stopped

  backend-3:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=5000
      - REDIS_HOST=redis
      - MONGODB_URI=mongodb://mongo:27017/web-tools-prod
      - WORKER_CONCURRENCY=20
      - INSTANCE_ID=backend-3
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - redis
      - mongo
    restart: unless-stopped

  # Dedicated Worker Instances
  worker-1:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: npm run worker
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - MONGODB_URI=mongodb://mongo:27017/web-tools-prod
      - WORKER_CONCURRENCY=30
      - INSTANCE_ID=worker-1
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - redis
      - mongo
    restart: unless-stopped

  worker-2:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: npm run worker
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - MONGODB_URI=mongodb://mongo:27017/web-tools-prod
      - WORKER_CONCURRENCY=30
      - INSTANCE_ID=worker-2
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - redis
      - mongo
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://nginx
    restart: unless-stopped

  # Redis for Queue Management
  redis:
    image: redis:7-alpine
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # MongoDB
  mongo:
    image: mongo:7
    environment:
      - MONGO_INITDB_DATABASE=web-tools-prod
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped

  # Monitoring
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped

volumes:
  redis_data:
  mongo_data: 
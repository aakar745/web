version: '3.8'

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true  # Internal network not exposed to the outside world

services:
  # Redis for job queue and caching with authentication
  redis:
    image: redis:alpine
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MongoDB database with authentication
  mongo:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - mongo_data:/data/db
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')", "-u", "${MONGO_USERNAME}", "-p", "${MONGO_PASSWORD}", "--authenticationDatabase", "admin"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Main application - backend API and static frontend
  app:
    image: ${DOCKER_REGISTRY}/web-tools:${APP_VERSION}
    environment:
      - NODE_ENV=production
      - PORT=5000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MONGODB_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongo:27017/webtools?authSource=admin
      - FRONTEND_URL=${FRONTEND_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRE=7d
      - MAX_MEMORY_USAGE_PERCENT=70  # Lower threshold for containerized environment
    ports:
      - "80:5000"
      - "443:5000"  # Added HTTPS port
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - frontend
      - backend
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # Worker process for background image processing
  worker:
    image: ${DOCKER_REGISTRY}/web-tools:${APP_VERSION}
    command: node dist/workers/imageWorker.js
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MONGODB_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongo:27017/webtools?authSource=admin
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRE=7d
      - WORKER_CONCURRENCY=2
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    depends_on:
      app:
        condition: service_started
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
    restart: always
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  redis_data:
  mongo_data:
  uploads:
  logs: 